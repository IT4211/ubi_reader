#!/usr/bin/env python

#############################################################
# ubi_reader
# (c) 2013 Jason Pruitt (jrspruitt@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#############################################################

import os
import sys
import time
import argparse

from ubireader import settings
from ubireader.ubi import ubi
from ubireader.ubi.defines import UBI_EC_HDR_MAGIC
from ubireader.ubifs import ubifs
from ubireader.ubifs import walk
from ubireader.ubifs.output import extract_files
from ubireader.ubifs.defines import *
from ubireader.ubi_io import ubi_file, leb_virtual_file
from ubireader.debug import error, log
from ubireader.utils import guess_filetype, guess_start_offset, guess_leb_size, guess_peb_size


def display_list(ubifs, inum):
    """
    :param ubifs: ubifs object
    :return:
    """
    fls = str()
    fls_inum = int()
    fls_name = str()
    fls_type = str()
    inodes = {}
    walk.index(ubifs, ubifs.master_node.root_lnum, ubifs.master_node.root_offs, inodes)
    for i in (inodes[1].values())[1]:
	for key, value in i:
		if key == 'inum':
			fls_inum = value
		elif key == 'name':
			fls_name = value
		elif key == 'type':
			if value == UBIFS_ITYPE_REG:
				fls_type = 'r/r'
			elif value == UBIFS_ITYPE_DIR:
				fls_type = 'd/d'
	print "%s %s: %s" % (fls_type, str(fls_inum), fls_name) 

    """
    for ino_num in inodes.keys():
	print "inodes[ino_num] : " + str(inodes[ino_num])
	if 'dent' in inodes[ino_num].keys():
		for dent_node_obj in inodes[ino_num]['dent']:
			print dent_node_obj.display()
		print inodes[ino_num]['ino'].display()
        else:
            print inodes[ino_num]['ino'].display()
    
    for ino_num in inodes.keys():
	if 'dent' in inodes[ino_num].keys():
		dir_node = (inodes[ino_num].values())[-1]
		for i in dir_node:
			print i.display()
		
		#for key, value in inodes[ino_num]:
		#	if key == 'name':
		#		print "name : " + str(value)
    """	



if __name__=='__main__':
    start = time.time()
    description = 'show list about file inode in UBI or UBIFS image.'
    usage = 'ubireader_display_list [options] filepath'
    parser = argparse.ArgumentParser(usage=usage, description=description)

    parser.add_argument('-l', '--log', action='store_true', dest='log',
                        help='Print extraction information to screen.')

    parser.add_argument('-v', '--verbose-log', action='store_true', dest='verbose',
                        help='Prints nearly everything about anything to screen.')

    parser.add_argument('-p', '--peb-size', type=int, dest='block_size',
			help='Specify PEB size. (UBI Only)')
    
    parser.add_argument('-e', '--leb-size', type=int, dest='block_size',
			help='Specify LEB size. (UBIFS Only)')

    parser.add_argument('-i', '--inum', type=int, dest='inum', help='Specify Inode number.')

    parser.add_argument('filepath', help='File to extract contents of.')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()

    if args.filepath:
        path = args.filepath
        if not os.path.exists(path):
            parser.error("File path doesn't exist.")

    start_offset = guess_start_offset(path)

    end_offset = None
	 
    if args.inum:
        inum = args.inum
    else:
        inum = 1



    filetype = guess_filetype(path, start_offset)

    if not filetype:
        parser.error('Could not determine file type.')

    settings.logging_on = args.log

    settings.logging_on_verbose = args.verbose

    if args.block_size:
        block_size = args.block_size
    else:
        if filetype == UBI_EC_HDR_MAGIC:
            block_size = guess_peb_size(path)
        elif filetype == UBIFS_NODE_MAGIC:
            block_size = guess_leb_size(path)

        if not block_size:
            parser.error('Block size could not be determined.')

    # Create file object
    ufile_obj = ubi_file(path, block_size, start_offset, end_offset)

    if filetype == UBI_EC_HDR_MAGIC:
        # Create UBI object
        ubi_obj = ubi(ufile_obj)
        # Display UBI info if not UBIFS request
        pass

    elif filetype == UBIFS_NODE_MAGIC:
        # Create UBIFS object
        ubifs_obj = ubifs(ufile_obj)
        display_list(ubifs_obj, inum)

    else:
        print 'Something went wrong to get here'
